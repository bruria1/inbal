diff --git a/commerce_coupon.rules.inc b/commerce_coupon.rules.inc
index d338abc..40f80d0 100644
--- a/commerce_coupon.rules.inc
+++ b/commerce_coupon.rules.inc
@@ -177,14 +177,20 @@ function commerce_coupon_action_set_granted_amount($commerce_coupon_log, $amount
   if (!($commerce_coupon_log instanceof EntityMetadataWrapper)) {
     $commerce_coupon_log = entity_metadata_wrapper('commerce_coupon_log', $commerce_coupon_log);
   }
-  
   $coupon = commerce_coupon_load($commerce_coupon_log->coupon_id->value());
+  $coupon_wrapper = entity_metadata_wrapper('commerce_coupon', $coupon);
 
-  // Set the unit price on the line item object.
-  $commerce_coupon_log->commerce_granted_amount->amount = $amount;
-  $commerce_coupon_log->commerce_granted_amount->currency_code = $currency_code;
+  // Special handling for percent amounts.
+  if ($coupon_wrapper->commerce_coupon_percent_amount->value()) {
+    $percent = $coupon_wrapper->commerce_coupon_percent_amount->value();
+    $commerce_coupon_log->commerce_granted_amount->amount = $amount * ($percent / 100);
+    $commerce_coupon_log->commerce_granted_amount->currency_code = $currency_code;
+  }
+  else {
+    $commerce_coupon_log->commerce_granted_amount->amount = $amount;
+    $commerce_coupon_log->commerce_granted_amount->currency_code = $currency_code;
+  }
 
-  
   // Add the base price to the components array.
   if (!commerce_price_component_load($commerce_coupon_log->commerce_granted_amount->value(), 'commerce_coupon_' . $coupon->type)) {
     $commerce_coupon_log->commerce_granted_amount->data = commerce_price_component_add(
@@ -195,27 +201,32 @@ function commerce_coupon_action_set_granted_amount($commerce_coupon_log, $amount
       FALSE
     );
   }
-  
+
   commerce_coupon_log_save($commerce_coupon_log->value());
-  
+
 
 }
 
 function commerce_coupon_action_create_coupon_line_item($commerce_coupon, $commerce_order, $amount, $currency_code) {
-  
   if (!($commerce_order instanceof EntityMetadataWrapper)) {
     $commerce_order = entity_metadata_wrapper('commerce_order', $commerce_order);
   }
-  
-  
+
   $line_item = commerce_coupon_line_item_new($commerce_coupon, $commerce_order->order_id->value());
-  
+
   $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
+  $coupon_wrapper = entity_metadata_wrapper('commerce_coupon', $commerce_coupon);
 
-  // Set the unit price on the line item object.
-  $line_item_wrapper->commerce_unit_price->amount = $amount * -1;
-  $line_item_wrapper->commerce_unit_price->currency_code = $currency_code;
-  
+  // Special handling for percent amounts.
+  if ($coupon_wrapper->commerce_coupon_percent_amount->value()) {
+    $percent = $coupon_wrapper->commerce_coupon_percent_amount->value();
+    $line_item_wrapper->commerce_unit_price->amount = $amount * ($percent / 100) * -1;
+    $line_item_wrapper->commerce_unit_price->currency_code = $currency_code;
+  }
+  else {
+    $line_item_wrapper->commerce_unit_price->amount = $amount * -1;
+    $line_item_wrapper->commerce_unit_price->currency_code = $currency_code;
+  }
 
   // Add the base price to the components array.
   if (!commerce_price_component_load($line_item_wrapper->commerce_unit_price->value(), 'commerce_coupon_' . $commerce_coupon->type)) {
@@ -240,6 +251,3 @@ function commerce_coupon_action_create_coupon_line_item($commerce_coupon, $comme
 function commerce_coupon_action_get_coupon_uses($commerce_coupon) {
   return array('number_of_uses' => commerce_coupon_get_number_of_uses($commerce_coupon->coupon_id));
 }
-
-
-
diff --git a/modules/basic/commerce_coupon_basic.module b/modules/basic/commerce_coupon_basic.module
index 16cb974..2480276 100644
--- a/modules/basic/commerce_coupon_basic.module
+++ b/modules/basic/commerce_coupon_basic.module
@@ -61,6 +61,15 @@ function commerce_coupon_basic_commerce_coupon_type_configure($bundle, $reset =
         ),
       ),
 
+      'default_value' => array(
+        array(
+          'amount' => 0,
+          'currency_code' => commerce_default_currency(),
+          'data' => array(
+            'components' => array(),
+          ),
+        ),
+      ),
       'display' => array(),
     );
 
@@ -72,8 +81,6 @@ function commerce_coupon_basic_commerce_coupon_type_configure($bundle, $reset =
     }
   }
 
-
-
   // Look for or add the specified percentage amount
   $field_name = 'commerce_coupon_percent_amount';
   $field = field_info_field($field_name);
@@ -82,13 +89,15 @@ function commerce_coupon_basic_commerce_coupon_type_configure($bundle, $reset =
   if (empty($field) || $reset) {
     $field_data = array(
       'field_name' => $field_name,
-      'type' => 'number_float',
+      'type' => 'number_decimal',
       'label' => t('Percentage Amount'),
       'cardinality' => 1,
       'entity_types' => array($entity_type),
       'translatable' => FALSE,
       'locked' => FALSE,
       'settings' => array(
+        'precision' => '10',
+        'scale' => '2',
         'decimal_separator' => '.',
       ),
     );
@@ -113,6 +122,7 @@ function commerce_coupon_basic_commerce_coupon_type_configure($bundle, $reset =
       'settings' => array(
         'min' => '0',
         'max' => '100',
+        'suffix' => '%',
       ),
     );
 
@@ -124,8 +134,7 @@ function commerce_coupon_basic_commerce_coupon_type_configure($bundle, $reset =
     }
   }
 
-
-  // Look for or add the specified percentage amount
+  // Look for or add the specified number of uses amount
   $field_name = 'commerce_coupon_number_of_uses';
   $field = field_info_field($field_name);
   $instance = field_info_instance($entity_type, $field_name, $bundle);
@@ -169,7 +178,6 @@ function commerce_coupon_basic_commerce_coupon_type_configure($bundle, $reset =
       ),
     );
 
-
     if (empty($instance)) {
       field_create_instance($instance_data);
     }
diff --git a/modules/basic/commerce_coupon_basic.rules_defaults.inc b/modules/basic/commerce_coupon_basic.rules_defaults.inc
index 9e7a617..91d5e51 100644
--- a/modules/basic/commerce_coupon_basic.rules_defaults.inc
+++ b/modules/basic/commerce_coupon_basic.rules_defaults.inc
@@ -1,7 +1,5 @@
 <?php
 
-
-
 /**
  * Implements hook_default_rules_configuration().
  */
@@ -10,10 +8,7 @@ function commerce_coupon_basic_default_rules_configuration() {
 
   // Define rules for percentage amounts
   foreach(commerce_coupon_get_types() as $type => $coupon_type) {
-  
     $instance = field_info_instance('commerce_coupon', 'commerce_coupon_percent_amount', $type);
-    
-    // Check if a percenatage field is assigned to this type
     if (empty($instance)) {
       // Skip this type if no percentage field is defined
       continue;
@@ -28,25 +23,20 @@ function commerce_coupon_basic_default_rules_configuration() {
       'coupon' => array(
         'type' => 'commerce_coupon',
         'label' => t('Coupon'),
-      ), 
+      ),
     ));
-
     $rule->label = t('Calculate @title amount', array('@title' => $coupon_type->label));
-
     // Add the action to apply the current tax.
     $rule->action('commerce_coupon_basic_apply_to_item_line', array(
       'line_item:select' => 'line-item',
       'coupon:select' => 'coupon',
     ));
     $rules['commerce_coupon_apply_' . $type . '_to_item_line'] = $rule;
-    
-    
+
     // Create a new product pricing rule.
     $rule = rules_reaction_rule();
-
     $rule->label = t('Calculate coupon amount: @title', array('@title' => $coupon_type->label));
     $rule->active = TRUE;
-
     // Add the action to invoke every coupon component matching this type.
     $rule
       ->event('commerce_product_calculate_sell_price')
@@ -54,13 +44,12 @@ function commerce_coupon_basic_default_rules_configuration() {
         'line_item:select' => 'line-item',
       )
     );
-
     $rules['commerce_coupon_calculate_' . $type . '_amount'] = $rule;
   }
-  
-  
-  
-  
+
+
+
+
   // Create fixed amount rule
   $rule = rules_reaction_rule(array(), array(
     'commerce_coupon_line_item' => array(
@@ -68,33 +57,55 @@ function commerce_coupon_basic_default_rules_configuration() {
       'label' => 'commerce coupon line item')
     )
   );
-
   $rule->label = t('Calculate coupon with fixed amount');
   $rule->active = TRUE;
-  
+
   $rule
-  ->event('commerce_coupon_redeem')
-  ->condition('entity_has_field', array('entity:select' => 'coupon', 'field' => 'commerce_coupon_fixed_amount'))
-  ->condition('data_is', array('data:select' => 'coupon:commerce-coupon-fixed-amount:amount', 'op' => '>', 'value' => 0))
-  ->action('commerce_coupon_action_create_coupon_line_item', array(
-    'commerce_coupon:select' => 'coupon',
-    'commerce_order:select' => 'commerce-order',
-    'amount:select' => 'coupon:commerce-coupon-fixed-amount:amount',
-    'currency_code:select' => 'coupon:commerce-coupon-fixed-amount:currency-code'
-  ))
-  ->action('commerce_coupon_action_set_granted_amount', array(
-    'commerce_coupon_log:select' => 'coupon-log',
-    'amount:select' => 'coupon:commerce-coupon-fixed-amount:amount',
-    'currency_code:select' => 'coupon:commerce-coupon-fixed-amount:currency-code'
-  ));
-  
+    ->event('commerce_coupon_redeem')
+    ->condition('entity_has_field', array('entity:select' => 'coupon', 'field' => 'commerce_coupon_fixed_amount'))
+    ->condition('data_is', array('data:select' => 'coupon:commerce-coupon-fixed-amount:amount', 'op' => '>', 'value' => 0))
+    ->action('commerce_coupon_action_create_coupon_line_item', array(
+      'commerce_coupon:select' => 'coupon',
+      'commerce_order:select' => 'commerce-order',
+      'amount:select' => 'coupon:commerce-coupon-fixed-amount:amount',
+      'currency_code:select' => 'coupon:commerce-coupon-fixed-amount:currency-code'
+    ))
+    ->action('commerce_coupon_action_set_granted_amount', array(
+      'commerce_coupon_log:select' => 'coupon-log',
+      'amount:select' => 'coupon:commerce-coupon-fixed-amount:amount',
+      'currency_code:select' => 'coupon:commerce-coupon-fixed-amount:currency-code'
+    ));
   $rules['commerce_coupon_basic_fixed_amount'] = $rule;
-  
-  
-  
-  
-  
-  
+
+  $rule = rules_reaction_rule(array(), array(
+    'commerce_coupon_line_item' => array(
+      'type' => 'commerce_coupon_line_item',
+      'label' => 'commerce coupon line item')
+    )
+  );
+  $rule->label = t('Calculate coupon with percentage amount');
+  $rule->active = TRUE;
+
+  $rule
+    ->event('commerce_coupon_redeem')
+    ->condition('entity_has_field', array('entity:select' => 'coupon', 'field' => 'commerce_coupon_percent_amount'))
+    ->condition('data_is', array('data:select' => 'coupon:commerce-coupon-percent-amount', 'op' => '>', 'value' => 0))
+    ->action('commerce_coupon_action_create_coupon_line_item', array(
+      'commerce_coupon:select' => 'coupon',
+      'commerce_order:select' => 'commerce-order',
+      'amount:select' => 'coupon:commerce-coupon-percent-amount',
+      'currency_code:select' => 'commerce-order:commerce-order-total:currency-code'
+    ))
+    ->action('commerce_coupon_action_set_granted_amount', array(
+      'commerce_coupon_log:select' => 'coupon-log',
+      'amount:select' => 'coupon:commerce-coupon-percent-amount',
+      'currency_code:select' => 'commerce-order:commerce-order-total:currency-code'
+    ));
+  $rules['commerce_coupon_basic_percent_amount'] = $rule;
+
+
+
+
   // Add validation rule component to check the number of uses of a coupon
   $rule = rule(array(
     'commerce_coupon' => array(
@@ -104,47 +115,42 @@ function commerce_coupon_basic_default_rules_configuration() {
     'number_of_redemptions' => array(
       'type' => 'integer',
       'label' => t('Number Of Redemptions'),
-    ), 
+    ),
   ));
-
   $rule->label = t('Coupon Validation: Set the coupon as invalid if number of uses is reached');
 
   $rule
-  ->condition('entity_has_field', array('entity:select' => 'commerce_coupon', 'field' => 'commerce_coupon_number_of_uses'))
-  ->condition(rules_and()->condition(
-      rules_or()->condition('data_is', array('data:select' => 'commerce_coupon:commerce-coupon-number-of-uses', 'op' => '<', 'value:select' => 'number-of-redemptions'))
-      ->condition('data_is', array('data:select' => 'commerce_coupon:commerce-coupon-number-of-uses', 'value:select' => 'number-of-redemptions'))
-    )
-  );
-  
+    ->condition('entity_has_field', array('entity:select' => 'commerce_coupon', 'field' => 'commerce_coupon_number_of_uses'))
+    ->condition(rules_and()->condition(
+        rules_or()->condition('data_is', array('data:select' => 'commerce_coupon:commerce-coupon-number-of-uses', 'op' => '<', 'value:select' => 'number-of-redemptions'))
+        ->condition('data_is', array('data:select' => 'commerce_coupon:commerce-coupon-number-of-uses', 'value:select' => 'number-of-redemptions'))
+      )
+    );
+
   $rule->action('drupal_message', array(
     'message' => 'The coupon is already too often used.',
     'type' => 'error',
   ));
-  
   $rule->action('commerce_coupon_action_is_invalid_coupon', array());
   $rules['commerce_coupon_basic_validate_uses_of_coupon_component'] = $rule;
 
 
 
 
-
   // Reaction on the validation event for check uses of coupons:
   $rule = rules_reaction_rule();
   $rule->label = t('Coupon Validation: Check the number of redemptions');
   $rule->active = TRUE;
-  
+
   $rule
-  ->event('commerce_coupon_validate')
-  ->condition('entity_has_field', array('entity:select' => 'coupon', 'field' => 'commerce_coupon_number_of_uses'))
-  ->action('commerce_coupon_action_get_coupon_uses', array('commerce_coupon:select' => 'coupon'))
-  ->action('component_commerce_coupon_basic_validate_uses_of_coupon_component', array(
-    'commerce_coupon:select' => 'coupon',
-    'number_of_redemptions:select' => 'number-of-uses'
-  ));
-  
+    ->event('commerce_coupon_validate')
+    ->condition('entity_has_field', array('entity:select' => 'coupon', 'field' => 'commerce_coupon_number_of_uses'))
+    ->action('commerce_coupon_action_get_coupon_uses', array('commerce_coupon:select' => 'coupon'))
+    ->action('component_commerce_coupon_basic_validate_uses_of_coupon_component', array(
+      'commerce_coupon:select' => 'coupon',
+      'number_of_redemptions:select' => 'number-of-uses'
+    ));
   $rules['commerce_coupon_basic_validate_uses_of_coupon'] = $rule;
-  
+
   return $rules;
 }
-
